{"version":3,"sources":["components/Button.js","components/Sleep.js","components/BinarySearch.js","components/Swap.js","components/InsertionSort.js","components/DynamicIsSorted.js","components/Quicksort.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","divStyle","backgroundColor","bgColor","color","borderRadius","radius","padding","style","onClick","onClickFunction","disabled","text","sleep","ms","Promise","resolve","setTimeout","a","l","r","array","length","mid","Math","floor","setDisplayArray","map","value","index","className","height","heightMultiplier","width","id","fontSize","font","searchValue","console","log","setDisplayState","displayStateRef","current","setSearchState","binarySeach","swap","i","j","temp","setArray","delay","insertionSort","DynamicIsSorted","startingIndex","low","high","pivot","quickSort","quickSortMain","partition","then","partitionIndex","DELAY","WIDTH","WIDTH_CONSTANT","generate","min","max","num","random","push","App","useState","arraySize","setArraySize","arrayRef","arrayDisplay","displayState","searchState","setSearchValue","searchValueRef","isSorted","setIsSorted","sortProps","searchProps","searchValueRefCurrent","type","onChange","event","target","binarySearch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c09edf6e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Button = (props) => {\r\n    const divStyle = {\r\n        backgroundColor: props.bgColor,\r\n        color: props.color,\r\n        borderRadius: props.radius,\r\n        padding: '0.5rem',\r\n    }\r\n    return (\r\n        <button style={divStyle} onClick={props.onClickFunction} disabled={props.disabled}>{props.text}</button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n\r\nexport default sleep","import sleep from './Sleep'\r\n\r\nasync function binarySeach (props) {\r\n  //console.log(props.searchValue, props.searchValueRefCurrent)\r\n  let l = 0;\r\n  let r = props.array.length - 1\r\n  let mid\r\n  //console.log(props.array)\r\n  while (l <= r) {\r\n      mid = Math.floor((r+l)/2)\r\n      props.setDisplayArray(props.array.map((value, index) => {\r\n        if (index === r || index === l || index === mid){\r\n          return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.height}px`, backgroundColor: 'red'}} key={index} id={index}><div className=\"bar-text\"  style={{fontSize:`${props.font}rem`}}>{value}</div></div>\r\n        } else {\r\n          return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.height}px`, fontSize:`${props.font}rem`}} key={index} id={index}><div className=\"bar-text\" style={{fontSize:`${props.font}rem`}}>{value}</div></div>\r\n        }\r\n      }))\r\n      await sleep(1000)\r\n      if (props.searchValue > props.array[mid]) {\r\n          l = mid + 1\r\n      } else if (props.searchValue < props.array[mid]) {\r\n          r = mid - 1\r\n      } else {\r\n        props.setDisplayArray(props.array.map((value, index) => {\r\n          if (index === mid){\r\n            return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.height}px`, backgroundColor: '#00B6D3'}} key={index} id={index}><div className=\"bar-text\" style={{fontSize:`${props.font}rem`}}>{value}</div></div>\r\n          } else {\r\n            return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.height}px`}} key={index} id={index}><div className=\"bar-text\" style={{fontSize:`${props.font}rem`}}>{value}</div></div>\r\n          }\r\n        }))\r\n          console.log(`found ${props.searchValue}`)\r\n          break\r\n      }\r\n      \r\n  }\r\n  console.log('done')\r\n  props.setDisplayState(!props.displayStateRef.current)\r\n  props.setSearchState(false)\r\n}\r\n\r\nexport default binarySeach","const swap = (array, i, j) => {\r\n    let temp = array[i]\r\n    array[i] = array[j]\r\n    array[j] = temp\r\n}\r\n\r\nexport default swap","import sleep from './Sleep'\r\nimport swap from './Swap'\r\n\r\nasync function insertionSort (props) {\r\n    for (let i = 1; i < props.array.length; i++) {\r\n      for (let j = i; j >= 0 && props.array[j-1] > props.array[j] ; j--) {\r\n        \r\n        \r\n        props.setDisplayArray(props.array.map((value, index) => {\r\n          if (index === j || index === j-1){\r\n            return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`, backgroundColor: 'red'}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n          } else {\r\n            return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n          }\r\n        }))\r\n        swap(props.array, j-1, j)\r\n        props.setArray(props.array)\r\n        //swap(props.arrayDisplay, j-1, j)\r\n        //swapDisplay({array: props.arrayDisplay, setArray: props.setDisplayArray, i: j-1, j: j})\r\n        //props.setDisplayArray(props.arrayDisplay)\r\n        //console.log(j)\r\n        \r\n        await sleep(props.delay)\r\n      }\r\n    }\r\n    props.setArray(props.array)\r\n        props.setDisplayArray(props.array.map((value, index) => {\r\n            return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n        }))\r\n    props.setDisplayState(!props.displayStateRef.current)\r\n  }\r\n\r\n  export default insertionSort","\r\nconst DynamicIsSorted = (startingIndex, array) => {\r\n    let i = startingIndex\r\n    for (i; i < array.length - 1; i++) {\r\n        if (array[i] > array[i+1]) {\r\n            console.log('is not sorted', array.length, i)\r\n            return i\r\n        }\r\n    }\r\n    console.log('is sorted', array.length, i)\r\n    return i\r\n}\r\n\r\nexport default DynamicIsSorted","import sleep from './Sleep'\r\nimport swap from './Swap'\r\nimport DynamicIsSorted from './DynamicIsSorted'\r\n\r\nasync function partition (props, low, high) {\r\n    let pivot = props.array[high]\r\n    let i = low - 1\r\n\r\n    //console.log('in partition', props)\r\n    for (let j = low; j <= high - 1; j++) {\r\n        //console.log('in partition for loop', props.array)    \r\n        if (props.array[j] < pivot) {\r\n            i++\r\n            props.setDisplayArray(props.array.map((value, index) => {\r\n                //console.log(value)\r\n                if (index === j || index === i){\r\n                  return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`, backgroundColor: 'red'}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n                } else {\r\n                  return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n                }\r\n            }))\r\n            swap(props.array, i, j)\r\n            props.setArray(props.array)\r\n                \r\n            await sleep(props.delay)\r\n        }\r\n    }\r\n    props.setDisplayArray(props.array.map((value, index) => {\r\n        if (index === i+1 || index === high){\r\n          return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`, backgroundColor: 'red'}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n        } else {\r\n          return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n        }\r\n    }))\r\n    swap(props.array, i+1, high)\r\n    props.setArray(props.array)\r\n    //console.log('in partition end', props.array)\r\n    await sleep(props.delay)\r\n    return i + 1\r\n}\r\nfunction quickSort(props, low, high) {\r\n  let index = 0\r\n  quickSortMain(props, low, high)\r\n  function quickSortMain(props, low, high) {\r\n    //console.log(props)\r\n    \r\n    if (low < high) {\r\n        let paritionPromise = partition(props, low, high) \r\n        //console.log(paritionPromise)\r\n        paritionPromise.then((partitionIndex)=> {\r\n            //console.log('in then', props.array)\r\n            // console.log(props.array)\r\n            // console.log(partitionIndex)\r\n           \r\n            quickSortMain(props, low, partitionIndex-1)\r\n            quickSortMain(props, partitionIndex+1, high)\r\n        })\r\n        //console.log(partitionIndex)\r\n    } else {\r\n      console.log('else statement')\r\n      index = DynamicIsSorted(index, props.array)\r\n      \r\n      if (index === props.array.length - 1) {\r\n        console.log('sorted')\r\n        props.setArray(props.array)\r\n        props.setDisplayArray(props.array.map((value, index) => {\r\n            return <div className='bar' style = {{height: `${value*props.heightMultiplier}px`, width: `${props.width}px`}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${props.font}rem`}}>{value}</div></div>\r\n        }))\r\n        props.setDisplayState(false)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default quickSort\r\n\r\n\r\n\r\n//props.array.every((value, i, array)=>{return i === array.length -1 || array[i] <= array[i+1]})","import './styles/global.css'\n//import { useState } from 'react'\nimport useState from 'react-usestateref'\nimport Button from './components/Button'\nimport binarySearch from './components/BinarySearch'\nimport insertionSort from './components/InsertionSort'\nimport quickSortMain from './components/Quicksort'\nlet DELAY = 40;\nconst MIN_VALUE_GENERATED = 10;\nconst MAX_VALUE_GENERATED = 350;\nconst WIDTH_CONSTANT = 1500;\nconst HEIGHT_MULTIPLIER = 1.5;\n//const WIDTH_MULTIPLIER = 1.75;\n//let HEIGHT = HEIGHT_CONSTANT/(100*HEIGHT_MULTIPLIER);\nlet WIDTH = WIDTH_CONSTANT/(50);\nconst generate = (min, max, num) => { \n  let array = [];\n\n\n  for (let i = 0; i < num; i++){\n    let value = Math.floor(Math.random() * max) + min\n    //array.push(<div className='bar' style = {{height: '5px', width: `${value}px`}} key={i} id={i}>{value}</div>);\n    array.push(value)\n  }\n  //array.map((value) => <div>{value}</div>)\n  return array\n}\n\n\nfunction App() {\n  const [arraySize, setArraySize] = useState(50)\n  \n  const [array, setArray, arrayRef] = useState(generate(MIN_VALUE_GENERATED,MAX_VALUE_GENERATED,arraySize))\n  let font = 0\n  if (arrayRef.current.length > 50) {\n    font = 0\n  } else {\n    font = 1\n  }\n  const [arrayDisplay, setDisplayArray, arrayDisplayRef] = useState(array.map((value, index) => {\n    return <div className='bar' style = {{height: `${value*HEIGHT_MULTIPLIER}px`, width: `${WIDTH}px`}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${font}`}}>{value}</div></div>\n  }))\n  const [displayState, setDisplayState, displayStateRef] = useState(false)\n  const [searchState, setSearchState] = useState(false)\n  const [searchValue, setSearchValue, searchValueRef] = useState(0)\n  const [isSorted, setIsSorted, setIsSortedRef] = useState(false)\n  //console.log(array)\n  let sortProps = {\n    font: font,\n    array: array, \n    setArray: setArray, \n    arrayDisplay: arrayDisplay, \n    setDisplayArray: setDisplayArray, \n    setDisplayState: setDisplayState,\n    displayStateRef: displayStateRef,\n    delay: DELAY,\n    width: WIDTH,\n    heightMultiplier: HEIGHT_MULTIPLIER,\n  }\n  let searchProps = {\n    font: font, \n    setSearchState: setSearchState,\n    searchValue: searchValue, \n    searchValueRefCurrent: searchValueRef.current, \n    array: array, \n    setArray: setArray, \n    arrayDisplay: arrayDisplay, \n    setDisplayArray: setDisplayArray, \n    setDisplayState: setDisplayState, \n    displayStateRef: displayStateRef\n  }\n\n  function insertionSortArray() {\n    setSearchState(false)\n    setDisplayState(!displayStateRef.current)\n    insertionSort(sortProps)\n    setIsSorted(true)\n  }\n\n  function quickSortArray(){\n    setSearchState(false)\n    setDisplayState(!displayStateRef.current)\n    quickSortMain(sortProps, 0, array.length - 1)\n    setIsSorted(true)\n  }\n\n  function binarySearchArray(){\n    setDisplayState(!displayStateRef.current)\n    setSearchState(true)\n    // want to generate a random value to search (one that could or could not be in the array), but want it the random generation to favor an element in the array\n    let value = Math.floor(Math.random()*(6))\n    console.log(value)\n    setSearchValue(value < 4 ? array[Math.floor(Math.random()*(array.length-1))] : Math.floor(Math.random()*MAX_VALUE_GENERATED + MIN_VALUE_GENERATED))\n    //console.log(searchValue, searchValueRef)\n    searchProps.searchValue = searchValueRef.current\n    binarySearch(searchProps)\n  }\n  const clickGenerate = () =>{\n    DELAY = 10*(200/(arraySize))\n    //HEIGHT = HEIGHT_CONSTANT/(arraySize*HEIGHT_MULTIPLIER)\n    WIDTH = WIDTH_CONSTANT/(arraySize)\n    setArray(generate(MIN_VALUE_GENERATED,MAX_VALUE_GENERATED,arraySize))\n    setSearchState(false)\n    setIsSorted(false)\n    setDisplayArray(arrayRef.current.map((value, index) => {\n      return <div className='bar' style = {{height: `${value*HEIGHT_MULTIPLIER}px`, width: `${WIDTH}px`}} key={index} id={index}><div className=\"bar-text\" style={{ fontSize:`${arrayRef.current.length > 50 ? 0 : 1}rem`}}>{value}</div></div>\n    }))\n    //clickGenerateDisplay()\n  }\n\n\n  return (\n    <div className=\"main\">\n      \n      <div className=\"buttons\">\n        <span>{displayState && !searchState && `Sorting ${array.length} elements`} {!displayState && !searchState && `${arraySize} elements`}  </span>\n        {!displayState && <input type = \"range\" min =\"10\" max =\"200\" value = {arraySize} onChange = {(event)=>{\n          setArraySize(event.target.value)\n        }}></input>}\n        {!(displayState) &&<Button onClickFunction = {() => {clickGenerate()}} bgColor=\"white\" color=\"black\" radius=\"5px\" text=\"generate array\"></Button>}\n        {!(displayState) && <Button onClickFunction = {insertionSortArray} bgColor=\"white\" color=\"black\" radius=\"5px\" text=\"insertion sort\"></Button>}\n        {!(displayState) && <Button onClickFunction = {quickSortArray} bgColor=\"white\" color=\"black\" radius=\"5px\" text=\"quicksort\"></Button>}\n        {!(displayState) && <Button onClickFunction = {binarySearchArray} bgColor=\"white\" color=\"black\" radius=\"5px\" text=\"binary search\" disabled={!isSorted}></Button>}\n      </div>\n      {(searchState) && <div className='search-status'>searching for: {searchValue}</div>}\n      <div className='array-display'>\n        {arrayDisplay}\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n\n\n// old way of displaying\n// setDisplayArray(arrayRef.current.map((value, index) => {\n//   return <div className='bar' style = {{height: `${HEIGHT}px`, width: `${value*WIDTH_MULTIPLIER}px`, fontSize:`${arrayRef.current.length > 90 ? 0 : 1}rem`}} key={index} id={index}>{value}</div>\n// }))","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}